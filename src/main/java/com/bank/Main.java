package com.bank;

import com.bank.model.*;
import com.bank.service.BankService;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.*;

public class Main {
    private static final Scanner scanner = new Scanner(System.in);
    private static final BankService bankService = new BankService();
    private static final ObjectMapper objectMapper = new ObjectMapper()
            .enable(SerializationFeature.INDENT_OUTPUT);

    private static final String FILE_NAME = "bank_data.json";

    public static void main(String[] args) {
        while (true) {
            printMenu();
            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1" -> createAccount();
                case "2" -> createCategory();
                case "3" -> createOperation();
                case "4" -> calculateBalanceDifference();
                case "5" -> groupOperationsByCategory();
                case "6" -> listAccounts();
                case "7" -> listOperations();
                case "8" -> exportData();
                case "9" -> importData();
                case "0" -> {
                    System.out.println("–í—ã—Ö–æ–¥...");
                    return;
                }
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    }

    private static void printMenu() {
        System.out.println("\n=== –ë–∞–Ω–∫ –ú–µ–Ω—é ===");
        System.out.println("1. –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç");
        System.out.println("2. –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
        System.out.println("3. –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é");
        System.out.println("4. –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥");
        System.out.println("5. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");
        System.out.println("6. –ü–æ–∫–∞–∑–∞—Ç—å —Å—á–µ—Ç–∞");
        System.out.println("7. –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏");
        System.out.println("8. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö");
        System.out.println("9. –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö");
        System.out.println("0. –í—ã—Ö–æ–¥");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
    }

    private static void exportData() {
        try {
            objectMapper.writeValue(new File(FILE_NAME), bankService);
            System.out.println("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ " + FILE_NAME);
        } catch (IOException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: " + e.getMessage());
        }
    }

    private static void importData() {
        try {
            File file = new File(FILE_NAME);
            if (!file.exists()) {
                System.out.println("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º.");
                return;
            }

            BankService importedData = objectMapper.readValue(file, BankService.class);
            bankService.loadData(importedData);
            System.out.println("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.");
        } catch (IOException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: " + e.getMessage());
        }
    }

    private static void createAccount() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞: ");
        String name = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ");
        BigDecimal balance = new BigDecimal(scanner.nextLine());

        BankAccount account = bankService.createAccount(name, balance);
        System.out.println("‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω: " + account.getId());
    }

    private static void createCategory() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ");
        String name = scanner.nextLine();
        System.out.print("–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (INCOME/EXPENSE): ");
        CategoryType type = CategoryType.valueOf(scanner.nextLine().toUpperCase());

        Category category = bankService.createCategory(type, name);
        System.out.println("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: " + category.getId());
    }

    private static void createOperation() {
        System.out.print("ID —Å—á–µ—Ç–∞: ");
        UUID accountId = UUID.fromString(scanner.nextLine());
        System.out.print("ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ");
        UUID categoryId = UUID.fromString(scanner.nextLine());
        System.out.print("–°—É–º–º–∞: ");
        BigDecimal amount = new BigDecimal(scanner.nextLine());
        System.out.print("–î–∞—Ç–∞ (–≥–≥–≥–≥-–º–º-–¥–¥): ");
        LocalDate date = LocalDate.parse(scanner.nextLine());
        System.out.print("–û–ø–∏—Å–∞–Ω–∏–µ: ");
        String description = scanner.nextLine();
        System.out.print("–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (INCOME/EXPENSE): ");
        OperationType type = OperationType.valueOf(scanner.nextLine().toUpperCase());

        try {
            Operation operation = bankService.createOperation(type, accountId, amount, date, description, categoryId);
            System.out.println("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + operation.getId());
        } catch (IllegalArgumentException e) {
            System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private static void calculateBalanceDifference() {
        System.out.print("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–≥–≥–≥–≥-–º–º-–¥–¥): ");
        LocalDate startDate = LocalDate.parse(scanner.nextLine());
        System.out.print("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (–≥–≥–≥–≥-–º–º-–¥–¥): ");
        LocalDate endDate = LocalDate.parse(scanner.nextLine());

        BigDecimal result = bankService.calculateBalanceDifference(startDate, endDate);
        System.out.println("üìä –†–∞–∑–Ω–∏—Ü–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: " + result);
    }

    private static void groupOperationsByCategory() {
        System.out.print("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–≥–≥–≥–≥-–º–º-–¥–¥): ");
        LocalDate startDate = LocalDate.parse(scanner.nextLine());
        System.out.print("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (–≥–≥–≥–≥-–º–º-–¥–¥): ");
        LocalDate endDate = LocalDate.parse(scanner.nextLine());

        Map<String, BigDecimal> grouped = bankService.groupOperationsByCategory(startDate, endDate);
        System.out.println("üìå –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:");
        grouped.forEach((category, total) -> System.out.println(category + ": " + total));
    }

    private static void listAccounts() {
        System.out.println("üìã –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤:");
        for (BankAccount account : bankService.getAllAccounts()) {
            System.out.println(account.getId() + " | " + account.getName() + " | –ë–∞–ª–∞–Ω—Å: " + account.getBalance());
        }
    }

    private static void listOperations() {
        System.out.println("üìã –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π:");
        for (Operation operation : bankService.getAllOperations()) {
            System.out.println(operation.getId() + " | " + operation.getType() + " | " +
                    operation.getAmount() + " | " + operation.getDescription() + " | " +
                    operation.getDate() + " | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + operation.getCategory().getName());
        }
    }
}
